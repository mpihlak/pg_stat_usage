diff --git a/src/backend/access/heap/heapam.c b/src/backend/access/heap/heapam.c
index b019bc1..5f8d2ad 100644
--- a/src/backend/access/heap/heapam.c
+++ b/src/backend/access/heap/heapam.c
@@ -1270,6 +1270,8 @@ relation_close(Relation relation, LOCKMODE lockmode)
 
 	if (lockmode != NoLock)
 		UnlockRelationId(&relid, lockmode);
+
+	pgstat_endstats(relation);
 }
 
 
diff --git a/src/backend/access/index/indexam.c b/src/backend/access/index/indexam.c
index 54b71cb..95db134 100644
--- a/src/backend/access/index/indexam.c
+++ b/src/backend/access/index/indexam.c
@@ -179,6 +179,8 @@ index_close(Relation relation, LOCKMODE lockmode)
 
 	if (lockmode != NoLock)
 		UnlockRelationId(&relid, lockmode);
+
+	pgstat_endstats(relation);
 }
 
 /* ----------------
diff --git a/src/backend/postmaster/pgstat.c b/src/backend/postmaster/pgstat.c
index a392197..f645782 100644
--- a/src/backend/postmaster/pgstat.c
+++ b/src/backend/postmaster/pgstat.c
@@ -241,6 +241,15 @@ static volatile bool got_SIGHUP = false;
  */
 static instr_time total_func_time;
 
+/*
+ * Hooks to be called from the backends when reporting stats to the collector
+ * or initializing/finalzing the per-object stats counters.
+ */
+report_stat_hook_type report_stat_hook = NULL;
+start_function_stat_hook_type start_function_stat_hook = NULL;
+end_function_stat_hook_type end_function_stat_hook = NULL;
+start_table_stat_hook_type start_table_stat_hook = NULL;
+end_table_stat_hook_type end_table_stat_hook = NULL;
 
 /* ----------
  * Local function forward declarations
@@ -772,6 +781,10 @@ pgstat_report_stat(bool force)
 		return;
 	last_report = now;
 
+	/* Call any hooks before the stats have been cleared */
+	if (report_stat_hook)
+		report_stat_hook();
+
 	/*
 	 * Scan through the TabStatusArray struct(s) to find tables that actually
 	 * have counts, and build messages to send.  We have to separate shared
@@ -1545,6 +1558,10 @@ pgstat_init_function_usage(FunctionCallInfoData *fcinfo,
 
 	/* get clock time as of function start */
 	INSTR_TIME_SET_CURRENT(fcu->f_start);
+
+	/* Call hooks */
+	if (start_function_stat_hook)
+		start_function_stat_hook(fcinfo, fcu);
 }
 
 /*
@@ -1615,6 +1632,10 @@ pgstat_end_function_usage(PgStat_FunctionCallUsage *fcu, bool finalize)
 
 	/* indicate that we have something to send */
 	have_function_stats = true;
+
+	/* Call any hooks */
+	if (end_function_stat_hook)
+		end_function_stat_hook(fcu, finalize);
 }
 
 
@@ -1655,17 +1676,36 @@ pgstat_initstats(Relation rel)
 	}
 
 	/*
-	 * If we already set up this relation in the current transaction, nothing
-	 * to do.
+	 * Find or make the PgStat_TableStatus entry and update link, if we have
+	 * not done that alreay
 	 */
-	if (rel->pgstat_info != NULL &&
-		rel->pgstat_info->t_id == rel_id)
-		return;
+	if (!rel->pgstat_info || rel->pgstat_info->t_id != rel_id)
+		rel->pgstat_info = get_tabstat_entry(rel_id, rel->rd_rel->relisshared);
 
-	/* Else find or make the PgStat_TableStatus entry, and update link */
-	rel->pgstat_info = get_tabstat_entry(rel_id, rel->rd_rel->relisshared);
+	/* Call any hooks */
+	if (start_table_stat_hook)
+		start_table_stat_hook(rel);
 }
 
+
+/* ----------
+ * pgstat_endstats() -
+ *
+ *	Finalize statistics collection for a relation.
+ *	Called whenever a relation is closed.
+ *
+ *  Presently this is just an placeholder for enabling hooking into. The stats
+ *  collector itself really doesn't do anything here.
+ * ----------
+ */
+void
+pgstat_endstats(Relation rel)
+{
+	if (end_table_stat_hook)
+		end_table_stat_hook(rel);
+}
+
+
 /*
  * get_tabstat_entry - find or create a PgStat_TableStatus entry for rel
  */
diff --git a/src/include/pgstat.h b/src/include/pgstat.h
index 4e8dac6..c370531 100644
--- a/src/include/pgstat.h
+++ b/src/include/pgstat.h
@@ -987,6 +987,20 @@ typedef struct PgStat_FunctionCallUsage
 	instr_time	f_start;
 } PgStat_FunctionCallUsage;
 
+/*
+ * Hooks for extending the stats reporting subsystem
+ */
+typedef void (*report_stat_hook_type)(void);
+typedef void (*start_function_stat_hook_type)(FunctionCallInfoData *, PgStat_FunctionCallUsage *);
+typedef void (*end_function_stat_hook_type)(PgStat_FunctionCallUsage *, bool finalize);
+typedef void (*start_table_stat_hook_type)(Relation);
+typedef void (*end_table_stat_hook_type)(Relation);
+
+extern PGDLLIMPORT report_stat_hook_type report_stat_hook;
+extern PGDLLIMPORT start_function_stat_hook_type start_function_stat_hook;
+extern PGDLLIMPORT end_function_stat_hook_type end_function_stat_hook;
+extern PGDLLIMPORT start_table_stat_hook_type start_table_stat_hook;
+extern PGDLLIMPORT end_table_stat_hook_type end_table_stat_hook;
 
 /* ----------
  * GUC parameters
@@ -1077,6 +1091,7 @@ extern PgStat_TableStatus *find_tabstat_entry(Oid rel_id);
 extern PgStat_BackendFunctionEntry *find_funcstat_entry(Oid func_id);
 
 extern void pgstat_initstats(Relation rel);
+extern void pgstat_endstats(Relation rel);
 
 /* ----------
  * pgstat_report_wait_start() -

diff --git a/src/backend/postmaster/pgstat.c b/src/backend/postmaster/pgstat.c
index a392197..9f86b3f 100644
--- a/src/backend/postmaster/pgstat.c
+++ b/src/backend/postmaster/pgstat.c
@@ -241,6 +241,14 @@ static volatile bool got_SIGHUP = false;
  */
 static instr_time total_func_time;
 
+/*
+ * Hooks to be called from the backends when reporting stats to the collector
+ * or initializing/finalzing the per-object stats counters.
+ */
+report_stat_hook_type report_stat_hook = NULL;
+start_function_stat_hook_type start_function_stat_hook = NULL;
+end_function_stat_hook_type end_function_stat_hook = NULL;
+start_table_stat_hook_type start_table_stat_hook = NULL;
 
 /* ----------
  * Local function forward declarations
@@ -772,6 +780,10 @@ pgstat_report_stat(bool force)
 		return;
 	last_report = now;
 
+	/* Call any hooks before the stats have been cleared */
+	if (report_stat_hook)
+		report_stat_hook();
+
 	/*
 	 * Scan through the TabStatusArray struct(s) to find tables that actually
 	 * have counts, and build messages to send.  We have to separate shared
@@ -1545,6 +1557,10 @@ pgstat_init_function_usage(FunctionCallInfoData *fcinfo,
 
 	/* get clock time as of function start */
 	INSTR_TIME_SET_CURRENT(fcu->f_start);
+
+	/* Call hooks */
+	if (start_function_stat_hook)
+		start_function_stat_hook(fcinfo, fcu);
 }
 
 /*
@@ -1615,6 +1631,10 @@ pgstat_end_function_usage(PgStat_FunctionCallUsage *fcu, bool finalize)
 
 	/* indicate that we have something to send */
 	have_function_stats = true;
+
+	/* Call any hooks */
+	if (end_function_stat_hook)
+		end_function_stat_hook(fcu, finalize);
 }
 
 
@@ -1664,6 +1684,10 @@ pgstat_initstats(Relation rel)
 
 	/* Else find or make the PgStat_TableStatus entry, and update link */
 	rel->pgstat_info = get_tabstat_entry(rel_id, rel->rd_rel->relisshared);
+
+	/* Call any hooks */
+	if (start_table_stat_hook)
+		start_table_stat_hook(rel);
 }
 
 /*
diff --git a/src/include/pgstat.h b/src/include/pgstat.h
index 4e8dac6..ef93ac9 100644
--- a/src/include/pgstat.h
+++ b/src/include/pgstat.h
@@ -987,6 +987,18 @@ typedef struct PgStat_FunctionCallUsage
 	instr_time	f_start;
 } PgStat_FunctionCallUsage;
 
+/*
+ * Hooks for extending the stats reporting subsystem
+ */
+typedef void (*report_stat_hook_type)(void);
+typedef void (*start_function_stat_hook_type)(FunctionCallInfoData *, PgStat_FunctionCallUsage *);
+typedef void (*end_function_stat_hook_type)(PgStat_FunctionCallUsage *, bool finalize);
+typedef void (*start_table_stat_hook_type)(Relation);
+
+extern PGDLLIMPORT report_stat_hook_type report_stat_hook;
+extern PGDLLIMPORT start_function_stat_hook_type start_function_stat_hook;
+extern PGDLLIMPORT end_function_stat_hook_type end_function_stat_hook;
+extern PGDLLIMPORT start_table_stat_hook_type start_table_stat_hook;
 
 /* ----------
  * GUC parameters
